// checker-practice4.cpp : 此檔案包含 'main' 函式。程式會於該處開始執行及結束執行。
//

#include "pch.h"
#include <iostream>
#include <fstream> //要開啟檔案時用的標頭檔
#include <Windows.h>
#include <cmath>
#define n 17
using namespace std;


const int N = 17;
int A[N][N];
void readboard(int A[N][N]);
double r = 0; //棋子與所要下的目標的距離
double r1 = 0; 
double r2 = 0;
HWND hwnd;
int Color_Name;//棋子的顏色

struct Chess
{
	int x; //棋子的x座標
	int y; //棋子的y座標
	int c; //顏色
};
struct Chess my_checker[15];//存放自己棋子所在位置的座標的陣列
struct Chess another_checker[15];//存放敵方棋子所在位置的座標的陣列
void kind_my_another();//分辨敵我方
void search(); //找棋子的位置
void choose_chess(int x_destination, int y_destination);  //指定這一局要移動的座標並輸出，指定棋子與目的地座標的距離

int main(int argc,char *argv[])
{
	int count = 0;
	readboard(A);
	kind_my_another();
	search();
	
	if (argc > 1) 
	{
		if (!strcmp(argv[1], "2"))
		{
			cout << "you are RED " << endl;
			Color_Name = 2;
			choose_chess(16, 4);

		}
		else if (!strcmp(argv[1], "3"))
		{
			cout << "you are YELLOW" << endl;
			Color_Name = 3;
			choose_chess(4, 16);
		}
		else if (!strcmp(argv[1], "4"))
		{
			cout << "you are GREEN" << endl;
			Color_Name = 4;
			choose_chess(4, 4);
		}
		else
		{
			cout << "wrong COLOR!!!" << endl;
		}
		
	}
	else 
	{
		
	}
}

void readboard(int A[N][N])
{
	ifstream file;
	file.open("board.txt");
	int i, j;
	for (i = 0; i < N; i++)
		for (j = 0; j < N; j++)
		{
			file >> A[i][j];
		}
	file.close();
}

void choose_chess(int x_destination, int y_destination) //選定要下的棋子，把座標輸出"1072016.txt"裡，且換行
{
	int count = 0;
	int	COUNT;
	int x = 0;
	int y = 0;
	int i, j;
	double temp = 100000;//暫存值
	int I, J;//最短距離的座標值
	ifstream file;
	ofstream fin;
	file.open("board.txt");
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			file >> A[i][j];
			if (A[i][j] == Color_Name)
			{
				//---選一個棋子的過程----//
				cout << i << "," << x_destination << "," << j << "," << y_destination << endl;//DEBUG
				r = (i - x_destination) *(i - x_destination) + (j - y_destination) * (j - y_destination);//取點對點距離但不取根號
				A[i][j] = r; //將A[i][j]的值改為r
				cout << A[i][j] << endl;//DEBUG
				if (A[i][j] < temp)//找最小值
				{
					temp = A[i][j];
					I = i;
					J = j;
				}

			}
		}
	}
	cout << temp << endl;//DEBUG
	cout << I << "," << J << endl;//DEBUG
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			file >> A[i][j];
			if (Color_Name == 2)
			{
				r1 = ((I+1) - x_destination) *((J-1) - x_destination) + ((I+1) - y_destination) * ((J-1) - y_destination);
				r2 = ((I + 1) - x_destination) *((J) - x_destination) + ((I + 1) - y_destination) * ((J) - y_destination);
			}
		}
	}
	file.close();
	cout << r1 << endl;//DEBUG
	cout << I+1 << "," << J-1 << endl;//DEBUG
	cout << r2 << endl;//DEBUG
	cout << I + 1 << "," << J << endl;//DEBUG
}


void kind_my_another()
{
	int my = 0;
	int another = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (A[i][j] == Color_Name) {
				my_checker[my].x = i;//把i放入struct的x裡
				my_checker[my].y = j;//把j放入struct的y裡
				my_checker[my].c = Color_Name;
			}
			else if ((A[i][j] != 0) && (A[i][j] != 1)) {
				my_checker[another].x = i;//把i放入struct的x裡
				my_checker[another].y = j;//把j放入struct的y裡
			}
		}
	}
}

void search()
{
	for (int i = 0; i < 15; i++) {
		int x;
		int y;
		x = my_checker[i].x; //把struct裡面的位置取出來，放入x裡
		y = my_checker[i].y;  //把struct裡面的位置取出來，放入y裡
	}
}

/*int Destination_distance(int x_destination, int y_destination)
{
	int x=0;
	int y=0;
	int i,j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			if (A[i][j] == Color_Name) {
				for (int a = -1; a <= 1; a++) {
					for (int b = -1; b <= 1; b++) {
						if (a != 1 && b != -1) {
							r = sqrt(pow((x_destination - (i + a)), 2) + pow((y_destination - (j + b)), 2));
							if (r < r_min) {
								r_min = r;
								A[x][y] = A[i + a][j + b];
							}
						}
					}
				}
			}
		}
	}
	A[i][j] = A[x][y];
	return r_min;
}*/
