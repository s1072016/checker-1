// checker-practice4.cpp : 此檔案包含 'main' 函式。程式會於該處開始執行及結束執行。
//

#include "pch.h"
#include <iostream>
#include <fstream> //要開啟檔案時用的標頭檔
#include <Windows.h>
#include <cmath>
#define n 17
using namespace std;


const int N = 17;
int A[N][N];
double r = 0; //棋子與所要下的目標的距離
double r1 = 0;
double r2 = 0;
double r3 = 0;
double r4 = 0;
double r5 = 0;
double r6 = 0; 
HWND hwnd;
int Color_Name;//棋子的顏色

struct Chess
{
	int x; //棋子的x座標
	int y; //棋子的y座標
	int c; //顏色
};
struct Chess my_checker[30];//存放自己棋子所在位置的座標的陣列
struct Chess another_checker[30];//存放敵方棋子所在位置的座標的陣列
void Redreadboard(int A[N][N]);
void kind_my_another();//分辨敵我方
void search(); //找棋子的位置
void choose_chess(int x_destination, int y_destination);  //指定這一局要移動的座標並輸出，指定棋子與目的地座標的距離

int main(int argc, char *argv[])
{
	
	kind_my_another();
	search();
	if (argc > 1)
	{
		if (!strcmp(argv[1], "2"))
		{
			cout << "you are RED " << endl;
			Color_Name = 2;
			choose_chess(16, 4);

		}
		else if (!strcmp(argv[1], "3"))
		{
			cout << "you are YELLOW" << endl;
			Color_Name = 3;
			choose_chess(4, 16);
		}
		else if (!strcmp(argv[1], "4"))
		{
			cout << "you are GREEN" << endl;
			Color_Name = 4;
			choose_chess(4, 4);
		}
		else
		{
			cout << "wrong COLOR!!!" << endl;
		}

	}
	else
	{

	}
}

void Redreadboard(int A[N][N])
{
	ifstream file;
	file.open("board.txt");
	int i, j;
	for (i = 0; i < N; i++)
		for (j = 0; j < N; j++)
		{
			file >> A[i][j];
		}
	file.close();
	/*if (A[16][4] != 2)
	{
		choose_chess(16, 4);
	}
	else if (A[16][4] == 2 && A[15][5] != 2)
	{
		choose_chess(15, 5);
		
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] != 2)
	{
		choose_chess(15, 4);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] != 2)
	{
		choose_chess(14, 6);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] == 2 && A[14][5] != 2)
	{
		choose_chess(14, 5);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] == 2 && A[14][5] != 2 && A[14][4] == 2)
	{
		choose_chess(14, 4);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] == 2 && A[14][5] != 2 && A[14][4] == 2 && A[13][7] != 2)
	{
		choose_chess(13, 7);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] == 2 && A[14][5] != 2 && A[14][4] == 2 && A[13][7] == 2 && A[13][6] != 2)
	{
		choose_chess(13, 6);
	}
	else if (A[16][4] == 2 && A[15][5] == 2 && A[15][4] == 2 && A[14][6] == 2 && A[14][5] != 2 && A[14][4] == 2 && A[13][7] == 2 && A[13][6] == 2 && A[13][5] == 2)
	{
		choose_chess(13, 5);
	}*/
}

void choose_chess(int x_destination, int y_destination) //選定要下的棋子，把座標輸出"1072016.txt"裡，且換行
{
	cout << x_destination << "," << y_destination << endl;
	int x = 0;
	int y = 0;
	int i, j;
	double temp = 100000;//暫存值
	int I, J;//最短距離的座標值
	ifstream file;
	ofstream fin;
	file.open("board.txt");
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			file >> A[i][j];
			if (A[i][j] == Color_Name)
			{
				//---選一個棋子的過程----//
				//DEBUG
				r = (i - x_destination) *(i - x_destination) + (j - y_destination) * (j - y_destination);//取點對點距離但不取根號
				 //將A[i][j]的值改為r
				//DEBUG
				cout << i << "," << x_destination << "," << j << "," << y_destination << "," << A[i][j] << endl;
				if (r < temp && r != 0)//找最小值
				{
					temp = r;
					J = j;
					I = i;
				}

			}
		}
	}
	//DEBUG
	cout << I << "," << J << "," << temp << endl;//DEBUG
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			file >> A[i][j];
			if (Color_Name == 2)
			{
				r1 = ((I + 1) - x_destination) *((I + 1) - x_destination) + ((J - 1) - y_destination) * ((J - 1) - y_destination);//左下
				r2 = ((I + 1) - x_destination) *((I + 1) - x_destination) + ((J)-y_destination) * ((J)-y_destination);//右下
				r3 = ((I)-x_destination) *((I)-x_destination) + ((J - 1) - y_destination) * ((J - 1) - y_destination);//左
				r4 = ((I)-x_destination) *((I)-x_destination) + ((J + 1) - y_destination) * ((J + 1) - y_destination);//右
			}
			else if (Color_Name == 3)
			{
				r2 = ((I + 1) - x_destination) *((I + 1) - x_destination) + ((J)-y_destination) * ((J)-y_destination);//右下
				r4 = ((I)-x_destination) *((I)-x_destination) + ((J + 1) - y_destination) * ((J + 1) - y_destination);//右
				r5 = ((I - 1) - x_destination) *((I - 1) - x_destination) + ((J)-y_destination) * ((J)-y_destination);//左上
				r6 = ((I - 1) - x_destination) *((I - 1) - x_destination) + ((J + 1) - y_destination) * ((J + 1) - y_destination);//右上
			}
			else if (Color_Name == 4)
			{
				r1 = ((I + 1) - x_destination) *((I + 1) - x_destination) + ((J - 1) - y_destination) * ((J - 1) - y_destination);//左下
				r3 = ((I)-x_destination) *((I)-x_destination) + ((J - 1) - y_destination) * ((J - 1) - y_destination);//左
				r5 = ((I - 1) - x_destination) *((I - 1) - x_destination) + ((J)-y_destination) * ((J)-y_destination);//左上
				r6 = ((I - 1) - x_destination) *((I - 1) - x_destination) + ((J + 1) - y_destination) * ((J + 1) - y_destination);//右上
			}
			else
			{

			}
		}
	}
	file.close();
	if (Color_Name == 2)//紅
	{
		cout << A[I + 1][J - 1] << "," << A[I + 1][J] << "," << A[I - 1][J] << "," << A[I][J + 1] << endl;
		if (r1 < r2 && r1 < r3 && r1 < r4 &&A[I + 1][J - 1] == 1)//找最短距離
		{
			cout << I + 1 << "," << J - 1 << "," << r1 << ",左下" << endl;
		}
		else if (r1 < r2 && r1 < r3 && r1 < r4 && A[I + 1][J - 1] != 1 && A[I + 1][J] == 1)//左下有棋往右下走
		{
			cout << I + 1 << "," << J << "," << r2 << ",右下" << endl;
		}
		else if (r1 < r2 && r1 < r3 && r1 < r4 && A[I + 1][J - 1] != 1 && A[I + 1][J] != 1 && A[I][J + 1] == 1)//左下右下有棋往右走
		{
			cout << I << "," << J + 1 << "," << r4 << ",右" << endl;
		}
		else if (r1 < r2 && r1 < r3 && r1 < r4 && A[I + 1][J - 1] != 1 && A[I + 1][J] != 1 && A[I][J + 1] != 1 && A[I][J + 1] == 1)//左下右下正右有棋往左走
		{
			cout << I << "," << J - 1 << "," << r3 << ",左" << endl;
		}
		else
		{
		}

		if (r2 < r1 && r2 < r3 && r2 < r4&& A[I + 1][J] == 1)//找最短距離
		{
			cout << I + 1 << "," << J << "," << r2 << ",右下" << endl;
		}
		else if (r2 < r1 && r2 < r3 && r2 < r4&& A[I + 1][J] != 1 && A[I][J + 1] == 1)//右下有棋往右走
		{
			cout << I << "," << J + 1 << "," << r4 << ",右" << endl;
		}
		else if (r2 < r1 && r2 < r3 && r2 < r4&& A[I + 1][J] != 1 && A[I][J + 1] != 1 && A[I + 1][J - 1] == 1)//右下正右有棋往左下走
		{
			cout << I + 1 << "," << J - 1 << "," << r1 << ",左下" << endl;
		}
		else if (r2 < r1 && r2 < r3 && r2 < r4&& A[I + 1][J] != 1 && A[I][J + 1] != 1 && A[I + 1][J - 1] != 1 && A[I][J - 1] == 1)//右下正右左下有棋往左走
		{
			cout << I + 1 << "," << J - 1 << "," << r1 << ",左" << endl;
		}
		else
		{
		}


		if (r3 < r1 && r3 < r2 && r3 < r4&& A[I][J - 1] == 1)
		{
			cout << I << "," << J - 1 << "," << r3 << endl;
		}
		else if (r3 < r1 && r3 < r2 && r3 < r4&& A[I][J - 1] == 1)
		{
			cout << I << "," << J - 1 << "," << r3 << endl;
		}
		else if (r3 < r1 && r3 < r2 && r3 < r4&& A[I][J - 1] == 1)
		{
			cout << I << "," << J - 1 << "," << r3 << endl;
		}
		else
		{
		}



		if (r4 < r1 && r4 < r3 && r4 < r2&& A[I][J + 1] == 1)
		{
			cout << I << "," << J + 1 << "," << r4 << endl;
		}
		else
		{

		}
		if (r4 < r1 && r4 < r3 && r4 < r2&& A[I][J + 1] == 1)
		{
			cout << I << "," << J + 1 << "," << r4 << endl;
		}
		else
		{

		}
		if (r4 < r1 && r4 < r3 && r4 < r2&& A[I][J + 1] == 1)
		{
			cout << I << "," << J + 1 << "," << r4 << endl;
		}
		else
		{

		}
	}





	else if (Color_Name == 3)
	{
		if (r6 < r2  && r6 < r4 && r6 < r5)
		{
			if (A[I - 1][J + 1] == 1)//右上走
			{
				cout << I - 1 << "," << J + 1 << "," << r6 << ",右上" << endl;
			}
			else if (A[I - 1][J + 1] != 1 && A[I][J + 1] == 1)//右上有棋往右走
			{
				cout << I << "," << J + 1 << "," << r4 << ",右" << endl;
			}
			else if (A[I - 1][J + 1] != 1 && A[I][J + 1] != 1 && A[I + 1][J] == 1)//右上正右有棋往右下走
			{
				cout << I + 1 << "," << J << "," << r2 << ",右下" << endl;
			}
			else if (A[I - 1][J + 1] != 1 && A[I][J + 1] != 1 && A[I + 1][J] != 1 && A[I - 1][J] == 1)//右上正右右下有棋往左上走
			{
				cout << I - 1 << "," << J << "," << r5 << ",左上" << endl;
			}
			else
			{

			}
		}
		else
		{

		}
		if (r4 < r2  && r4 < r6 && r4 < r5)
		{
			if (A[I][J + 1] == 1)//右
			{
				cout << I << "," << J + 1 << "," << r4 << ",右" << endl;
			}
			else if (A[I][J + 1] == 1 && A[I + 1][J] == 1)//右有棋往右下走
			{
				cout << I + 1 << "," << J << "," << r2 << ",右下" << endl;
			}
			else if (A[I][J + 1] == 1 && A[I + 1][J] != 1 && A[I - 1][J + 1] == 1)//正右右下有棋往右上走
			{
				cout << I - 1 << "," << J + 1 << "," << r6 << ",右上" << endl;
			}
			else if (A[I][J + 1] == 1 && A[I + 1][J] != 1 && A[I - 1][J + 1] != 1 && A[I - 1][J] == 1)//正右右下右上有棋往左上走
			{
				cout << I - 1 << "," << J << "," << r5 << ",左上" << endl;
			}
			else
			{
			}
		}
		else
		{
		}
		if (r2 < r4  && r2 < r5 && r2 < r6)
		{
			cout << I + 1 << "," << J << "," << r2 << ",右下" << endl;
		}
		else
		{

		}
		if (r5 < r2  && r5 < r4 && r5 < r6)
		{
			cout << I - 1 << "," << J << "," << r5 << ",左上" << endl;
		}
		else
		{

		}
	}

	else if (Color_Name == 4)
	{
	cout << r5 << "," << r1 << "," << r3 << "," << r6 << endl;
		if (r5 < r1  && r5-1 < r3 && r5 < r6)
		{
			if (A[I - 1][J] == 1)//左上
			{
				cout << I - 1 << "," << J << "," << r5 << ",左上" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I][J - 1] == 1)//左上有棋往左走
			{
				cout << I << "," << J - 1 << "," << r3 << ",左" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I][J - 1] == 1 && A[I + 1][J - 1] == 1)//左上正左有棋往左下走
			{
				cout << I + 1 << "," << J - 1 << "," << r1 << ",左下" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I][J - 1] == 1 && A[I + 1][J - 1] != 1 && A[I - 1][J + 1] == 1)//左上正左左下有棋往右上走
			{
				cout << I - 1 << "," << J + 1 << "," << r6 << ",右上" << endl;
			}
			else
			{

			}
		}
		else
		{
			cout << "123";
		}






		if (r3 < r1  && r3 < r5 && r3 < r6)
		{
			if (A[I][J - 1] == 1)//左
			{
				cout << I << "," << J - 1 << "," << r5 << ",左" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I + 1][J - 1] == 1)//左有棋往左下走
			{
				cout << I + 1 << "," << J - 1 << "," << r3 << ",左下" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I][J - 1] == 1 && A[I + 1][J - 1] == 1)//左下正左有棋往左上走
			{
				cout << I + 1 << "," << J - 1 << "," << r1 << ",左上" << endl;
			}
			else if (A[I - 1][J] != 1 && A[I][J - 1] == 1 && A[I + 1][J - 1] != 1 && A[I - 1][J + 1] == 1)//左上正左左下有棋往右上走
			{
				cout << I - 1 << "," << J + 1 << "," << r6 << ",右上" << endl;
			}
		}
		else
		{

		}
		if (r1 < r3  && r1 < r5 && r1 < r6)
		{
			cout << I + 1 << "," << J - 1 << "," << r1 << ",左上" << endl;
		}
		else

			if (r6 < r1  && r6 < r3 && r6 < r5)
			{
				cout << I - 1 << "," << J + 1 << "," << r6 << ",右上" << endl;
			}
			else
			{
			}
	}
	else
	{

 }
}


void kind_my_another()
{
	int my = 0;
	int another = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (A[i][j] == Color_Name) {
				my_checker[my].x = i;//把i放入struct的x裡
				my_checker[my].y = j;//把j放入struct的y裡
				my_checker[my].c = Color_Name;
			}
			else if ((A[i][j] != 0) && (A[i][j] != 1)) {
				my_checker[another].x = i;//把i放入struct的x裡
				my_checker[another].y = j;//把j放入struct的y裡
			}
		}
	}
}

void search()
{
	for (int i = 0; i < 15; i++) {
		int x;
		int y;
		x = my_checker[i].x; //把struct裡面的位置取出來，放入x裡
		y = my_checker[i].y;  //把struct裡面的位置取出來，放入y裡
	}
}

/*int Destination_distance(int x_destination, int y_destination)
{
	int x=0;
	int y=0;
	int i,j;
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++) {
			if (A[i][j] == Color_Name) {
				for (int a = -1; a <= 1; a++) {
					for (int b = -1; b <= 1; b++) {
						if (a != 1 && b != -1) {
							r = sqrt(pow((x_destination - (i + a)), 2) + pow((y_destination - (j + b)), 2));
							if (r < r_min) {
								r_min = r;
								A[x][y] = A[i + a][j + b];
							}
						}
					}
				}
			}
		}
	}
	A[i][j] = A[x][y];
	return r_min;
}*/
